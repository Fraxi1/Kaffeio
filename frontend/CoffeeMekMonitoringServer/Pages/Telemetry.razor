@page "/telemetry"
@using CoffeeMekMonitoringServer.Models
@using CoffeeMekMonitoringServer.Services.Interfaces
@inject ITelemetryService TelemetryService
@inject IMachineService MachineService
@inject IFacilityService FacilityService

<PageTitle>Telemetria Macchinari - CoffeeMek</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-chart-line text-primary me-3"></i>
                        Telemetria Macchinari
                    </h2>
                    <p class="text-muted mb-0">Monitoraggio in tempo reale - Fresa CNC ‚Ä¢ Tornio ‚Ä¢ Assemblaggio ‚Ä¢ Test</p>
                </div>
                <div class="d-flex gap-2">
                    <a href="/" class="btn btn-outline-primary">
                        <i class="fas fa-home me-2"></i>
                        Dashboard
                    </a>
                    <button class="btn btn-success" @onclick="StartRealTimeMonitoring">
                        <i class="fas fa-play me-2"></i>
                        @(isRealTimeActive ? "Stop" : "Avvia") Real-Time
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="LoadTelemetryData">
                        <i class="fas fa-sync-alt me-2"></i>
                        Aggiorna
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Filtri Multi-Sede con Fusi Orari -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-primary text-white border-0">
                    <h6 class="mb-0">
                        <i class="fas fa-filter me-2"></i>
                        Filtri Monitoraggio Multi-Sede
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row align-items-end">
                        <div class="col-md-3">
                            <label class="form-label">Sede Produttiva:</label>
                            <select class="form-select" @bind="selectedFacilityId" @bind:after="ApplyFilters">                                <option value="0">üåç Tutte le sedi</option>
                                <option value="1">üáÆüáπ Milano (UTC+1)</option>
                                <option value="2">üáßüá∑ S√£o Paulo (UTC-3)</option>
                                <option value="3">üáªüá≥ Ho Chi Minh (UTC+7)</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Tipo Macchinario:</label>
                             <select class="form-select" @bind="selectedMachineType" @bind:after="ApplyFilters">
                                <option value="">Tutti i macchinari</option>
                                <option value="fresa">üîß Fresa CNC</option>
                                <option value="tornio">‚öôÔ∏è Tornio Automatico</option>
                                <option value="assemblaggio">üî© Linea Assemblaggio</option>
                                <option value="test">üß™ Linea Test</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Periodo Dati:</label>
                             <select class="form-select" @bind="selectedTimeRange" @bind:after="ApplyFilters">
                                <option value="30">Ultimi 30 minuti</option>
                                <option value="60">Ultima ora</option>
                                <option value="240">Ultime 4 ore</option>
                                <option value="720">Ultime 12 ore</option>
                                <option value="1440">Ultime 24 ore</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                                <i class="fas fa-times me-2"></i>
                                Reset Filtri
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Breadcrumb -->
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/" class="text-decoration-none">
                            <i class="fas fa-home me-1"></i>
                            Dashboard
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <span class="text-muted">Monitoraggio</span>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-chart-line me-1"></i>
                        Telemetria
                    </li>
                </ol>
            </nav>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Caricamento...</span>
                        </div>
                        <h5 class="text-muted">Caricamento dati telemetria in corso...</h5>
                        <p class="text-muted mb-0">
                            @if (isRealTimeActive)
                            {
                                <span>üî¥ Monitoraggio in tempo reale attivo</span>
                            }
                            else
                            {
                                <span>Connessione macchinari CoffeeMek</span>
                            }
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="row">
            <div class="col-12">
                <div class="alert alert-danger border-0 shadow-sm" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-exclamation-triangle fa-2x me-3"></i>
                        <div class="flex-grow-1">
                            <h5 class="alert-heading mb-1">Errore nel caricamento telemetria</h5>
                            <p class="mb-2">@errorMessage</p>
                            <div class="d-flex gap-2">
                                <button class="btn btn-outline-danger btn-sm" @onclick="LoadTelemetryData">
                                    <i class="fas fa-redo me-2"></i>
                                    Riprova
                                </button>
                                <a href="/" class="btn btn-outline-secondary btn-sm">
                                    <i class="fas fa-home me-2"></i>
                                    Torna alla Dashboard
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (telemetryData.Any())
    {
        <!-- Status Overview per Sede -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-info text-white border-0">
                        <h6 class="mb-0">
                            <i class="fas fa-globe me-2"></i>
                            Status Overview Multi-Sede (@DateTime.UtcNow.ToString("HH:mm:ss") UTC)
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var facility in GetUniqueFacilities())
                            {
                                var facilityData = telemetryData.Where(t => t.Machine?.FacilityId == facility.Id).ToList();
                                var operativeMachines = facilityData.Count(t => GetMachineStatus(t) == "operative");
                                var totalMachines = facilityData.Count();
                                
                                <div class="col-md-4 mb-3">
                                    <div class="card border-start border-4 @GetFacilityBorderColor(facility.Id)">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between">
                                                <div>
                                                    <h6 class="mb-1">
                                                        @GetFacilityFlag(facility.Location) @facility.Name
                                                    </h6>
                                                    <small class="text-muted">
                                                        UTC@facility.TimeZone - @GetLocalTime(facility.TimeZone)
                                                    </small>
                                                </div>
                                                <div class="text-end">
                                                    <span class="badge bg-@(operativeMachines == totalMachines ? "success" : operativeMachines > 0 ? "warning" : "danger")">
                                                        @operativeMachines/@totalMachines Operative
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Dati Telemetria per Tipo Macchinario -->
        <div class="row">
            @foreach (var group in telemetryData.GroupBy(t => t.Machine?.Type).Where(g => !string.IsNullOrEmpty(g.Key)))
            {
                <div class="col-lg-6 col-xl-3 mb-4">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-header bg-@GetMachineTypeColor(group.Key!) text-white border-0">
                            <div class="d-flex align-items-center justify-content-between">
                                <h6 class="mb-0">
                                    <i class="@GetMachineTypeIcon(group.Key!) me-2"></i>
                                    @GetMachineTypeName(group.Key!)
                                </h6>
                                <span class="badge bg-light text-dark">
                                    @group.Count() attive
                                </span>
                            </div>
                        </div>
                        <div class="card-body">
                            @foreach (var telemetry in group.Take(3))
                            {
                                <div class="border-bottom pb-2 mb-2">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <small class="fw-bold">@telemetry.Machine?.Name</small>
                                        <span class="badge bg-@GetStatusBadgeColor(GetMachineStatus(telemetry))">
                                            @GetMachineStatus(telemetry).ToUpper()
                                        </span>
                                    </div>
                                    
                                    <!-- Dati specifici per tipo macchina secondo PDF -->
                                    @if (group.Key == "fresa")
                                    {
                                        <div class="row text-center">
                                            <div class="col-6">
                                                <small class="text-muted d-block">Tempo Ciclo</small>
                                                <strong>@GetTelemetryValue(telemetry, "tempoCiclo", "N/A")s</strong>
                                            </div>
                                            <div class="col-6">
                                                <small class="text-muted d-block">Vibrazione</small>
                                                <strong>@GetTelemetryValue(telemetry, "vibrazione", "N/A")g</strong>
                                            </div>
                                        </div>
                                    }
                                    else if (group.Key == "tornio")
                                    {
                                        <div class="row text-center">
                                            <div class="col-6">
                                                <small class="text-muted d-block">RPM</small>
                                                <strong>@GetTelemetryValue(telemetry, "velocitaRotazione", "N/A")</strong>
                                            </div>
                                            <div class="col-6">
                                                <small class="text-muted d-block">Temp. ¬∞C</small>
                                                <strong>@GetTelemetryValue(telemetry, "temperaturaMandrino", "N/A")</strong>
                                            </div>
                                        </div>
                                    }
                                    else if (group.Key == "assemblaggio")
                                    {
                                        <div class="row text-center">
                                            <div class="col-6">
                                                <small class="text-muted d-block">Operatori</small>
                                                <strong>@GetTelemetryValue(telemetry, "numeroOperatori", "N/A")</strong>
                                            </div>
                                            <div class="col-6">
                                                <small class="text-muted d-block">Produttivit√†</small>
                                                <strong>@GetTelemetryValue(telemetry, "produttivita", "N/A")%</strong>
                                            </div>
                                        </div>
                                    }
                                    else if (group.Key == "test")
                                    {
                                        <div class="row text-center">
                                            <div class="col-6">
                                                <small class="text-muted d-block">Pressione</small>
                                                <strong>@GetTelemetryValue(telemetry, "pressioneCaldaia", "N/A") bar</strong>
                                            </div>
                                            <div class="col-6">
                                                <small class="text-muted d-block">Esiti Test</small>
                                                <strong class="text-@(GetTelemetryValue(telemetry, "esitiTestFunzionali", "FAIL") == "PASS" ? "success" : "danger")">
                                                    @GetTelemetryValue(telemetry, "esitiTestFunzionali", "FAIL")
                                                </strong>
                                            </div>
                                        </div>
                                    }

                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>
                                        @FormatTimestamp(telemetry.Timestamp, telemetry.TimeZone)
                                    </small>
                                </div>
                            }
                            
                            @if (group.Count() > 3)
                            {
                                <div class="text-center">
                                    <small class="text-muted">... e altre @(group.Count() - 3) macchine</small>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-light border-0">
                            <button class="btn btn-outline-info btn-sm w-100" @onclick="() => ViewDetailedTelemetry(group.Key!)">
                                <i class="fas fa-chart-area me-2"></i>
                                Dettagli @GetMachineTypeName(group.Key!)
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Workflow Status Produzione -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-success text-white border-0">
                        <h6 class="mb-0">
                            <i class="fas fa-cogs me-2"></i>
                            Workflow Produzione: Fresa CNC ‚Üí Tornio ‚Üí Assemblaggio ‚Üí Test
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @{
                                var workflowPhases = new[] { "fresa", "tornio", "assemblaggio", "test" };
                                var phaseNames = new[] { "Fresa CNC", "Tornio", "Assemblaggio", "Test" };
                                var phaseIcons = new[] { "fas fa-cog", "fas fa-circle-notch", "fas fa-puzzle-piece", "fas fa-vial" };
                            }
                            
                            @for (int i = 0; i < workflowPhases.Length; i++)
                            {
                                var phase = workflowPhases[i];
                                var phaseMachines = telemetryData.Where(t => t.Machine?.Type == phase).ToList();
                                var activeCount = phaseMachines.Count(t => GetMachineStatus(t) == "operative");
                                
                                <div class="col-md-3 text-center">
                                    <div class="mb-2">
                                        <i class="@phaseIcons[i] fa-2x text-@GetWorkflowPhaseColor(activeCount, phaseMachines.Count)"></i>
                                    </div>
                                    <h6 class="mb-1">@phaseNames[i]</h6>
                                    <p class="mb-1">
                                        <span class="badge bg-@GetWorkflowPhaseColor(activeCount, phaseMachines.Count)">
                                            @activeCount/@phaseMachines.Count Operative
                                        </span>
                                    </p>
                                    <small class="text-muted">
                                        @if (phaseMachines.Any())
                                        {
                                            var avgEfficiency = phaseMachines.Average(t => GetEfficiency(t));
                                            <span>Efficienza: @avgEfficiency.ToString("F1")%</span>
                                        }
                                        else
                                        {
                                            <span>Nessun dato</span>
                                        }
                                    </small>
                                    
                                    @if (i < workflowPhases.Length - 1)
                                    {
                                        <div class="d-none d-md-block position-absolute" style="right: -15px; top: 50%; transform: translateY(-50%);">
                                            <i class="fas fa-arrow-right text-muted"></i>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body text-center py-5">
                        <div class="mb-4">
                            <i class="fas fa-chart-line fa-4x text-muted"></i>
                        </div>
                        <h4 class="text-muted mb-3">Nessun dato telemetrico disponibile</h4>
                        <p class="text-muted mb-4">
                            @if (selectedFacilityId > 0 || !string.IsNullOrEmpty(selectedMachineType))
                            {
                                <span>Nessun dato telemetrico corrisponde ai filtri selezionati.</span>
                            }
                            else
                            {
                                <span>I macchinari CoffeeMek non stanno inviando dati telemetrici.</span>
                            }
                        </p>
                        <div class="d-flex justify-content-center gap-2">
                            @if (selectedFacilityId > 0 || !string.IsNullOrEmpty(selectedMachineType))
                            {
                                <button class="btn btn-outline-primary" @onclick="ClearFilters">
                                    <i class="fas fa-times me-2"></i>
                                    Rimuovi Filtri
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick="StartRealTimeMonitoring">
                                    <i class="fas fa-play me-2"></i>
                                    Avvia Monitoraggio
                                </button>
                            }
                            <a href="/" class="btn btn-outline-secondary">
                                <i class="fas fa-home me-2"></i>
                                Torna alla Dashboard
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private List<MachineTelemetry> telemetryData = new();
    private List<Machine> machines = new();
    private List<Facility> facilities = new();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private bool isRealTimeActive = false;
    
    // Filtri
    private int selectedFacilityId = 0;
    private string selectedMachineType = string.Empty;
    private int selectedTimeRange = 60; // minuti

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        await LoadTelemetryData();
        await LoadMachines();
        await LoadFacilities();
    }

    private async Task LoadTelemetryData()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await TelemetryService.GetRecentTelemetryAsync(selectedTimeRange);
            
            if (result.IsSuccess && result.Data != null)
            {
                telemetryData = result.Data;
                ApplyFilters();
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Errore nel caricamento dati telemetria";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore imprevisto: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMachines()
    {
        try
        {
            var result = await MachineService.GetAllMachinesAsync();
            if (result.IsSuccess && result.Data != null)
            {
                machines = result.Data;
            }
        }
        catch (Exception) { /* Gestione silente */ }
    }

    private async Task LoadFacilities()
    {
        try
        {
            var result = await FacilityService.GetAllFacilitiesAsync();
            if (result.IsSuccess && result.Data != null)
            {
                facilities = result.Data;
            }
        }
        catch (Exception) { /* Gestione silente */ }
    }

    private void ApplyFilters()
    {
        // I filtri sono gi√† applicati nella query al servizio
        StateHasChanged();
    }

    private void ClearFilters()
    {
        selectedFacilityId = 0;
        selectedMachineType = string.Empty;
        selectedTimeRange = 60;
        LoadTelemetryData();
    }

    private async Task StartRealTimeMonitoring()
    {
        isRealTimeActive = !isRealTimeActive;
        if (isRealTimeActive)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Monitoraggio real-time avviato! (Simulazione)");
            // In una implementazione reale, qui si avvierebbe SignalR
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Monitoraggio real-time fermato.");
        }
        StateHasChanged();
    }

    private void ViewDetailedTelemetry(string machineType)
    {
        NavigationManager.NavigateTo($"/telemetry-details?type={machineType}");
    }

    // Helper methods basati sui requisiti del PDF
    private List<Facility> GetUniqueFacilities()
    {
        return facilities.Where(f => telemetryData.Any(t => t.Machine?.FacilityId == f.Id)).ToList();
    }

    private string GetMachineStatus(MachineTelemetry telemetry)
    {
        if (telemetry.Data.ContainsKey("statusOperativo"))
            return telemetry.Data["statusOperativo"]?.ToString() ?? "unknown";
        if (telemetry.Data.ContainsKey("statoMacchina"))
            return telemetry.Data["statoMacchina"]?.ToString() ?? "unknown";
        return "operative"; // default
    }

    private string GetTelemetryValue(MachineTelemetry telemetry, string key, string defaultValue)
    {
        return telemetry.Data.ContainsKey(key) ? telemetry.Data[key]?.ToString() ?? defaultValue : defaultValue;
    }

    private string GetFacilityFlag(string? location) => location?.ToLower() switch
    {
        "italy" => "üáÆüáπ",
        "brasil" => "üáßüá∑", 
        "vietnam" => "üáªüá≥",
        _ => "üåç"
    };

    private string GetFacilityBorderColor(int facilityId) => facilityId switch
    {
        1 => "border-success", // Italia
        2 => "border-warning", // Brasile
        3 => "border-info", // Vietnam
        _ => "border-secondary"
    };

    private string GetLocalTime(string timeZone)
    {
        var offset = int.Parse(timeZone);
        var localTime = DateTime.UtcNow.AddHours(offset);
        return localTime.ToString("HH:mm");
    }

    private string GetMachineTypeColor(string type) => type.ToLower() switch
    {
        "fresa" => "primary",
        "tornio" => "success",
        "assemblaggio" => "warning",
        "test" => "info",
        _ => "secondary"
    };

    private string GetMachineTypeIcon(string type) => type.ToLower() switch
    {
        "fresa" => "fas fa-cog",
        "tornio" => "fas fa-circle-notch",
        "assemblaggio" => "fas fa-puzzle-piece",
        "test" => "fas fa-vial",
        _ => "fas fa-question"
    };

    private string GetMachineTypeName(string type) => type.ToLower() switch
    {
        "fresa" => "Fresa CNC",
        "tornio" => "Tornio Auto",
        "assemblaggio" => "Assemblaggio",
        "test" => "Test",
        _ => type
    };

    private string GetStatusBadgeColor(string status) => status.ToLower() switch
    {
        "operative" => "success",
        "maintenance" => "warning",
        "offline" => "danger",
        _ => "secondary"
    };

    private string GetWorkflowPhaseColor(int active, int total)
    {
        if (total == 0) return "secondary";
        var ratio = (double)active / total;
        return ratio switch
        {
            >= 0.8 => "success",
            >= 0.5 => "warning",
            > 0 => "danger",
            _ => "secondary"
        };
    }

    private double GetEfficiency(MachineTelemetry telemetry)
    {
        if (telemetry.Data.ContainsKey("produttivita") && double.TryParse(telemetry.Data["produttivita"]?.ToString(), out var productivity))
            return productivity;
        if (telemetry.Data.ContainsKey("efficiency") && double.TryParse(telemetry.Data["efficiency"]?.ToString(), out var efficiency))
            return efficiency;
        return new Random().NextDouble() * 20 + 80; // Simulated efficiency
    }

    private string FormatTimestamp(string? timestamp, string timeZone)
    {
        if (string.IsNullOrEmpty(timestamp)) return "N/A";
        
        try
        {
            var dt = DateTime.Parse(timestamp);
            var offset = int.Parse(timeZone);
            var localTime = dt.AddHours(offset);
            return $"{localTime:HH:mm:ss} (UTC{timeZone})";
        }
        catch
        {
            return timestamp;
        }
    }
}
