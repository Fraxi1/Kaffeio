@page "/"
@using System.Security.Claims
@using CoffeeMekMonitoringServer.Services
@using CoffeeMekMonitoringServer.Services.Interfaces
@inject ITokenService TokenService
@inject IAuthenticationService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home - CoffeeMek</PageTitle>

<h1>Debug Autenticazione</h1>

<button @onclick="CheckAuth">Controlla Stato Autenticazione</button>
<button @onclick="ForceRefresh">Forza Refresh</button>

<div class="mt-3">
    <h3>Stato Debug:</h3>
    <p><strong>Token presente:</strong> @hasToken</p>
    <p><strong>Utente presente:</strong> @hasUser</p>
    <p><strong>Email utente:</strong> @userEmail</p>
    <p><strong>Autenticato:</strong> @isAuthenticated</p>
</div>

<AuthorizeView>
    <Authorized>
        <div class="alert alert-success">
            <h4>✅ UTENTE AUTENTICATO</h4>
            <p>Benvenuto, <strong>@context.User.Identity?.Name</strong>!</p>
            <p>Email: @context.User.FindFirst(ClaimTypes.Email)?.Value</p>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            <h4>❌ UTENTE NON AUTENTICATO</h4>
            <p>L'autenticazione non è riuscita.</p>
            <a href="/login" class="btn btn-primary">Vai al Login</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool hasToken = false;
    private bool hasUser = false;
    private string userEmail = "";
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuth();
    }

    private async Task CheckAuth()
    {
        hasToken = await TokenService.HasTokenAsync();
        var user = await TokenService.GetUserAsync();
        hasUser = user != null;
        userEmail = user?.Email ?? "(nessuno)";
        isAuthenticated = await AuthService.IsAuthenticatedAsync();

        StateHasChanged();
    }

    private async Task ForceRefresh()
    {
        var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
        await authStateProvider.GetAuthenticationStateAsync();
        await CheckAuth();
    }
}