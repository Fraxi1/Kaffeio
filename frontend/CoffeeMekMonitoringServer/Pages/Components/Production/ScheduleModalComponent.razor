@using ProductionScheduleModel = CoffeeMekMonitoringServer.Models.ProductionSchedule

@if (Show)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-@(IsEditMode ? "edit" : "plus") me-2"></i>
                        @(IsEditMode ? "Modifica Schedulazione CoffeeMek" : "Nuova Schedulazione CoffeeMek")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="@(() => OnCancel.InvokeAsync())"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@Schedule" OnValidSubmit="@HandleSave">
                        <DataAnnotationsValidator />
                        
                        <!-- Workflow CoffeeMek Info -->
                        <div class="alert alert-info border-0 mb-3">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-info-circle me-2"></i>
                                <div>
                                    <strong>Workflow Produzione CoffeeMek:</strong><br>
                                    <small>Fresa CNC ‚Üí Tornio Automatico ‚Üí Linea Assemblaggio ‚Üí Linea Test</small>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Sede Produttiva CoffeeMek *</label>
                                <InputSelect class="form-select" @bind-Value="Schedule.FacilityId">
                                    <option value="0">Seleziona sede...</option>
                                    <option value="1">üáÆüáπ Milano, Italia</option>
                                    <option value="2">üáßüá∑ S√£o Paulo, Brasile</option>
                                    <option value="3">üáªüá≥ Ho Chi Minh, Vietnam</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => Schedule.FacilityId)" class="text-danger small" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Fase Workflow *</label>
                                <InputSelect class="form-select" @bind-Value="Schedule.CurrentPhase">
                                    <option value="">Seleziona fase...</option>
                                    <option value="Fresa">üîß Fresa CNC</option>
                                    <option value="Tornio">‚öôÔ∏è Tornio Automatico</option>
                                    <option value="Assemblaggio">üî© Linea Assemblaggio</option>
                                    <option value="Test">üß™ Linea Test</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => Schedule.CurrentPhase)" class="text-danger small" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">Stato</label>
                                <InputSelect class="form-select" @bind-Value="Schedule.Status">
                                    <option value="Scheduled">üìÖ Programmato</option>
                                    <option value="InProgress">‚ö° In Produzione</option>
                                    <option value="Completed">‚úÖ Completato</option>
                                    <option value="Delayed">‚è∞ In Ritardo</option>
                                </InputSelect>
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Progresso (%)</label>
                                <InputNumber class="form-control" @bind-Value="Schedule.Progress" min="0" max="100" />
                                <ValidationMessage For="@(() => Schedule.Progress)" class="text-danger small" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Data Programmata</label>
                                <InputDate class="form-control" @bind-Value="scheduledDateInput" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="@(() => OnCancel.InvokeAsync())">
                                <i class="fas fa-times me-2"></i>
                                Annulla
                            </button>
                            <button type="submit" class="btn btn-success" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Salvando...</span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <span>Salva Schedulazione</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // CORREZIONE: Parameter standard invece di bind personalizzato
    [Parameter] public bool Show { get; set; }
    [Parameter] public ProductionScheduleModel Schedule { get; set; } = new();
    [Parameter] public bool IsEditMode { get; set; }
    [Parameter] public EventCallback<ProductionScheduleModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool isSaving = false;
    private DateTime? scheduledDateInput = null;

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Schedule.ScheduledDate))
        {
            try
            {
                scheduledDateInput = DateTime.Parse(Schedule.ScheduledDate);
            }
            catch
            {
                scheduledDateInput = DateTime.UtcNow;
            }
        }
        else
        {
            scheduledDateInput = DateTime.UtcNow;
        }
    }

    private async Task HandleSave()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            // Converti data input a string
            if (scheduledDateInput.HasValue)
            {
                Schedule.ScheduledDate = scheduledDateInput.Value.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            }

            await OnSave.InvokeAsync(Schedule);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}
