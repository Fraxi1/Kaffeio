@implements IDisposable

<div class="row mb-4">
    <div class="col-12">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-primary text-white border-0">
                <h6 class="mb-0">
                    <i class="fas fa-filter me-2"></i>
                    Filtri Multi-Sede CoffeeMek (Italia ‚Ä¢ Brasile ‚Ä¢ Vietnam)
                </h6>
            </div>
            <div class="card-body">
                <div class="row align-items-end">
                    <div class="col-md-3">
                        <label class="form-label">Sede Produttiva:</label>
                        <!-- CORREZIONE: Usa select HTML normale per evitare problemi -->
                        <select class="form-select" value="@FacilityId" @onchange="OnFacilityChanged">
                            <option value="0">üåç Tutte le sedi CoffeeMek</option>
                            <option value="1">üáÆüáπ Milano, Italia (UTC+1)</option>
                            <option value="2">üáßüá∑ S√£o Paulo, Brasile (UTC-3)</option>
                            <option value="3">üáªüá≥ Ho Chi Minh, Vietnam (UTC+7)</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Fase Workflow Caff√®:</label>
                        <select class="form-select" value="@Phase" @onchange="OnPhaseChanged">
                            <option value="">Tutte le fasi produzione</option>
                            <option value="Fresa">üîß Fresa CNC (Fase 1)</option>
                            <option value="Tornio">‚öôÔ∏è Tornio Automatico (Fase 2)</option>
                            <option value="Assemblaggio">üî© Linea Assemblaggio (Fase 3)</option>
                            <option value="Test">üß™ Linea Test (Fase 4)</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Stato Schedulazione:</label>
                        <select class="form-select" value="@Status" @onchange="OnStatusChanged">
                            <option value="">Tutti gli stati</option>
                            <option value="Scheduled">üìÖ Programmato</option>
                            <option value="InProgress">‚ö° In Produzione</option>
                            <option value="Completed">‚úÖ Completato</option>
                            <option value="Delayed">‚è∞ In Ritardo</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <button class="btn btn-outline-secondary w-100" @onclick="ClearAll">
                            <i class="fas fa-times me-2"></i>
                            Reset Filtri
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _disposed = false;

    [Parameter] public int FacilityId { get; set; }
    [Parameter] public EventCallback<int> FacilityIdChanged { get; set; }
    
    [Parameter] public string Phase { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> PhaseChanged { get; set; }
    
    [Parameter] public string Status { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> StatusChanged { get; set; }
    
    [Parameter] public EventCallback OnFiltersChanged { get; set; }

    // CORREZIONE: Event handlers protetti da dispose
    private async Task OnFacilityChanged(ChangeEventArgs e)
    {
        if (_disposed) return;
        
        if (int.TryParse(e.Value?.ToString(), out int facilityId))
        {
            await FacilityIdChanged.InvokeAsync(facilityId);
        }
        else
        {
            await FacilityIdChanged.InvokeAsync(0);
        }
        
        if (!_disposed)
        {
            await OnFiltersChanged.InvokeAsync();
        }
    }

    private async Task OnPhaseChanged(ChangeEventArgs e)
    {
        if (_disposed) return;
        
        await PhaseChanged.InvokeAsync(e.Value?.ToString() ?? string.Empty);
        
        if (!_disposed)
        {
            await OnFiltersChanged.InvokeAsync();
        }
    }

    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        if (_disposed) return;
        
        await StatusChanged.InvokeAsync(e.Value?.ToString() ?? string.Empty);
        
        if (!_disposed)
        {
            await OnFiltersChanged.InvokeAsync();
        }
    }

    private async Task ClearAll()
    {
        if (_disposed) return;

        try
        {
            // CORREZIONE: Operazioni sequenziali invece che parallele per evitare race condition
            await FacilityIdChanged.InvokeAsync(0);
            
            if (!_disposed)
            {
                await PhaseChanged.InvokeAsync(string.Empty);
            }
            
            if (!_disposed)
            {
                await StatusChanged.InvokeAsync(string.Empty);
            }
            
            if (!_disposed)
            {
                await OnFiltersChanged.InvokeAsync();
            }
        }
        catch (ObjectDisposedException)
        {
            // Ignora se il componente √® gi√† stato disposto
        }
    }

    public void Dispose()
    {
        _disposed = true;
    }
}
